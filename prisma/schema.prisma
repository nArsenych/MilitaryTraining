generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// enum UserType {
//   ORGANIZATION
//   CLIENT
// }

// enum EnrollmentStatus {
//   PENDING
//   APPROVED
//   REJECTED
// }

// model User {
//   id                 String              @id
//   type               UserType?
//   organizationProfile OrganizationProfile?
//   clientProfile      ClientProfile?
//   createdAt          DateTime           @default(now())
//   updatedAt          DateTime           @updatedAt
// }

// model OrganizationProfile {
//   id          String    @id @default(uuid())
//   userId      String    @unique
//   user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   name        String
//   description String?   @db.Text
//   logoUrl     String?   @db.Text
//   courses     Course[]  

//   @@index([userId])
// }

// model ClientProfile {
//   id           String            @id @default(uuid())
//   userId       String            @unique
//   user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
//   firstName    String?
//   lastName     String?
//   age          Int?
//   phone        String?
//   enrollments  CourseEnrollment[] 
  
//   @@index([userId])
// }

// model CourseEnrollment {
//   id            String           @id @default(uuid())
//   clientId      String
//   courseId      String
//   status        EnrollmentStatus @default(PENDING)
//   client        ClientProfile    @relation(fields: [clientId], references: [id], onDelete: Cascade)
//   course        Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
//   createdAt     DateTime         @default(now())

//   @@unique([clientId, courseId])
//   @@index([clientId])
//   @@index([courseId])
// }

model Course {
  id                String             @id @default(uuid())
  organizationId    String
  // organization      OrganizationProfile @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  // enrollments       CourseEnrollment[] 
  title            String             @db.Text
  startAge         Int?               @db.Int     
  endAge           Int?               @db.Int
  description      String?            @db.Text
  imageUrl         String?            @db.Text
  isPublished      Boolean            @default(false)
  categoryId       String
  cityId           String?
  startDate        DateTime?
  endDate          DateTime?
  createdAt        DateTime           @default(now())
  levelId          String?
  price            Float?             @default(0.0) @db.Float
  category         Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  city             City?              @relation(fields: [cityId], references: [id])
  level            Level?             @relation(fields: [levelId], references: [id])

  @@index([organizationId])
  @@index([categoryId])
  @@index([cityId])
  @@index([levelId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model City {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Level {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}